using System;
using System.Collections.Generic;

using Transloadit.Log;

using Newtonsoft.Json;

namespace Transloadit.Assembly
{
    /// <summary>
    /// Builds up an assembly which will be tried to be created on Transloadit
    /// </summary>
    public class AssemblyBuilder : IAssemblyBuilder
    {
        #region Protected constants

        /// <summary>
        /// Postfix for autogenerated file keys
        /// </summary>
        protected const string FilenameKeyPostfix = "";

        /// <summary>
        /// Prefix for autogenerated file keys
        /// </summary>
        protected const string FilenameKeyPrefix = "file_";

        #endregion

        #region Protected attributes

        /// <summary>
        /// Authentication information
        /// </summary>
        protected Dictionary<string, string> auth;

        /// <summary>
        /// Collection of custom fields
        /// </summary>
        protected Dictionary<string, object> fields;

        /// <summary>
        /// Collection of the files to be sent
        /// </summary>
        protected Dictionary<string, string> files;

        /// <summary>
        /// File increment value to store the index of the files to be uploaded which have auto generated key
        /// </summary>
        protected int fileIncrement = 0;

        /// <summary>
        /// Notification URL, proceed after assembly was completed 
        /// </summary>
        protected string notifyURL;

        /// <summary>
        /// Signature of the current assembly
        /// </summary>
        protected string signature;

        /// <summary>
        /// Used template ID
        /// </summary>
        protected string templateID;

        /// <summary>
        /// Steps in the assembly
        /// </summary>
        protected Dictionary<string, Dictionary<string, object>> steps;

        #endregion

        #region Constructors

        /// <summary>
        /// Creates a new TransloaditAssemblyBuilder object; sets steps, auth and files to empty collections
        /// </summary>
        public AssemblyBuilder()
        {
            steps = new Dictionary<string, Dictionary<string, object>>();
            auth = new Dictionary<string, string>();
            files = new Dictionary<string, string>();
            fields = new Dictionary<string, object>();
        }

        #endregion

        #region Public methods

        /// <summary>
        /// Adds file to the current assembly
        /// </summary>
        /// <param name="path">Path of the file</param>
        public void AddFile(string path)
        {
            string key = FilenameKeyPrefix + (fileIncrement++) + FilenameKeyPostfix;
            AddFile(key, path);
        }

        /// <summary>
        /// Adds file to the current assembly with specific key
        /// </summary>
        /// <param name="key">Key of the file to be uploaded</param>
        /// <param name="path">Path of the file</param>
        /// <exception cref="Transloadit.Assembly.Exceptions.InvalidFieldKeyException">
        /// Thrown when an invalid (reserved) field key is tried to be used
        /// </exception>
        public void AddFile(string key, string path)
        {
            try
            {
                ValidateKey(key);
                if (fields.ContainsKey(key) || files.ContainsKey(key))
                {
                    LoggerFactory.GetLogger().LogInfo(this.GetType(), "Autogenerated key will be used for {0} file with key {1}, because the specified key is already defined.", path, key);
                    AddFile(path);
                }
                else
                {
                    files.Add(key, path);
                }
            }
            catch (Exceptions.InvalidFieldKeyException e)
            {
                LoggerFactory.GetLogger().LogError(this.GetType(), e);
                throw e;
            }
        }

        /// <summary>
        /// Adds step to the current assembly
        /// </summary>
        /// <param name="name">Name of the step</param>
        /// <param name="step">Step to be added</param>
        public void AddStep(string name, IStep step)
        {
            steps[name] = step.ToDictionary();
        }

        /// <summary>
        /// Generates and gets the parameter tree of an assembly
        /// </summary>
        /// <returns>Parameters tree</returns>
        public Dictionary<string, object> GetParams()
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();

            if (auth.Count > 0)
            {
                parameters.Add("auth", auth);
            }

            if (HasNotifyUrl())
            {
                parameters.Add("notify_url", notifyURL);
            }

            if (HasSteps())
            {
                parameters.Add("steps", steps);
            }

            if (HasTemplateID())
            {
                parameters.Add("template_id", templateID);
            }

            return parameters;
        }

        /// <summary>
        /// Checks whether the assembly has notify URL
        /// </summary>
        public bool HasNotifyUrl()
        {
            return notifyURL != null && notifyURL.Length > 0;
        }
        
        /// <summary>
        /// Checks whether the assembly has steps
        /// </summary>
        public bool HasSteps()
        {
            return steps.Count > 0;
        }

        /// <summary>
        /// Checks whether the assembly has template ID
        /// </summary>
        public bool HasTemplateID()
        {
            return templateID != null && templateID.Length > 0;
        }

        /// <summary>
        /// Sets the expiration datetime of the assembly (as UTC date)
        /// </summary>
        /// <param name="dateTime">Expiration datetime</param>
        public void SetAuthExpires(DateTime dateTime)
        {
            auth["expires"] = String.Format("{0:yyyy'/'MM'/'dd HH:mm:ss+00:00}", dateTime);
        }

        /// <summary>
        /// Sets the authentication key for the assembly
        /// </summary>
        /// <param name="key">API key of the user</param>
        public void SetAuthKey(string key)
        {
            auth["key"] = key;
        }

        /// <summary>
        /// Sets the maximum size of the assembly
        /// </summary>
        /// <param name="maxSize">Maximum size (in bytes)</param>
        public void SetAuthMaxSize(int maxSize)
        {
            auth["max_size"] = maxSize.ToString();
        }

        /// <summary>
        /// Sets a custom field in the current assembly
        /// </summary>
        /// <param name="key">Key of the field</param>
        /// <param name="value">Value of the field</param>
        /// <exception cref="Transloadit.Assembly.Exceptions.InvalidFieldKeyException">
        /// Thrown when an invalid (reserved) field key is tried to be used
        /// </exception>
        /// <exception cref="Transloadit.Assembly.Exceptions.AlreadyDefinedKeyException">
        /// Thrown when an already defined key (in files or in fields) is tried to be used
        /// </exception>
        public void SetField(string key, object value)
        {
            try
            {
                ValidateKey(key);
                if (files.ContainsKey(key))
                {
                    throw new Exceptions.AlreadyDefinedKeyException(key, "files");
                }
                fields[key] = value;
            }
            catch (Exceptions.InvalidFieldKeyException e)
            {
                LoggerFactory.GetLogger().LogError(this.GetType(), e);
                throw e;
            }
            catch (Exceptions.AlreadyDefinedKeyException e)
            {
                LoggerFactory.GetLogger().LogError(this.GetType(), e);
                throw e;
            }
        }

        /// <summary>
        /// Sets the notification URL of the assembly, which will be requested after assembly is completed
        /// </summary>
        /// <param name="notifyURL">Notification URL (e.g.: 'http://my.domain.me/application')</param>
        public void SetNotifyURL(string notifyURL)
        {
            this.notifyURL = notifyURL;
        }

        /// <summary>
        /// Sets the used template ID of the assmebly (you can create multiple Transloadit templates under your account,please use its unique ID here)
        /// </summary>
        /// <param name="templateID">Template ID of the assmebly</param>
        public void SetTemplateID(string templateID)
        {
            this.templateID = templateID;
        }

        /// <summary>
        /// Converts the builder to JSON string and gets it
        /// </summary>
        /// <returns>Parameter tree as JSON string</returns>
        public string ToJsonString()
        {
            return JsonConvert.SerializeObject(GetParams()).Replace("/", "\\/");
        }

        /// <summary>
        /// Converts the builder to ApiData and gets the object, which will be the base of the sent Transloadit request
        /// </summary>
        /// <returns>Data to be sent to Transloadit backend</returns>
        public ApiData ToApiData()
        {
            ApiData apiData = new ApiData();
            apiData.Files = files;
            apiData.Fields.Add("params", ToJsonString());
            foreach (KeyValuePair<string, object> field in fields)
            {
                apiData.Fields.Add(field.Key, field.Value);
            }
            return apiData;
        }

        #endregion

        #region Protected methods

        /// <summary>
        /// Validates the passed key
        /// </summary>
        /// <param name="key">Key to be validated</param>
        /// <exception cref="Transloadit.Assembly.Exceptions.InvalidFieldKeyException">
        /// Thrown when an invalid (reserved) field key is tried to be used
        /// </exception>
        protected void ValidateKey(string key)
        {
            string[] invalidKeys = {"params", "signature", "template_id", "notify_url"};
            if (Array.IndexOf(invalidKeys, key) > -1)
            {
                throw new Exceptions.InvalidFieldKeyException(key);
            }
        }

        #endregion
    }
}
